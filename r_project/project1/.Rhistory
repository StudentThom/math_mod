help(optim)
out <- optim(c(1,1),loglik,x=y,lower=c(0,0), method="L-BFGS-B")
out <- optim(c(1,1),loglik,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B")
loglik <- function(data, alpha, beta){
answer = 0
print(alpha)
print(beta)
for (i in 1:length(data)){
answer = answer + - dbeta(data[i],alpha,beta,log=TRUE)
}
# answer = sum(-dbeta(data,alpha,beta,log=TRUE))
answer
}
out <- optim(c(1,1),loglik,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B")
loglik <- function(data, alpha_beta){
answer = 0
alpha = alpha_beta[1]
beta = alpha_beta[2]
print(alpha)
print(beta)
for (i in 1:length(data)){
answer = answer + - dbeta(data[i],alpha,beta,log=TRUE)
}
# answer = sum(-dbeta(data,alpha,beta,log=TRUE))
answer
}
surf3D(M$x,M$y,loglik(allp$p1,c(M$x,M$y)), colkey=FALSE,bty="b2",xlab="alpha",ylab="beta",zlab="likelihood")
surf3D(M$x,M$y,loglik(allp$p1,M$x,M$y), colkey=FALSE,bty="b2",xlab="alpha",ylab="beta",zlab="likelihood")
out <- optim(par = 1,loglik,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B")
out <- optim(par = 1,fn = loglik,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B")
out <- optim(par = c(1,1),fn = loglik,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B")
out
out <- optim(par = c(1,1),fn = -loglik,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B")
out <- optim(par = c(1,1),fn = -1 * loglik,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B")
out <- optim(par = c(1,1),fn = loglik,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B")
out
loglik <- function(data, alpha, beta){
answer = 0
# alpha = alpha_beta[1]
# beta = alpha_beta[2]
print(alpha)
print(beta)
for (i in 1:length(data)){
answer = answer + - dbeta(data[i],alpha,beta,log=TRUE)
}
# answer = sum(-dbeta(data,alpha,beta,log=TRUE))
answer
}
surf3D(M$x,M$y,loglik(allp$p1,M$x,M$y), colkey=FALSE,bty="b2",xlab="alpha",ylab="beta",zlab="likelihood")
loglik <- function(data, alpha, beta){
answer = 0
for (i in 1:length(data)){
answer = answer + - dbeta(data[i],alpha,beta,log=TRUE)
}
# answer = sum(-dbeta(data,alpha,beta,log=TRUE))
answer
}
loglik1_par <- function(data, alpha_beta){
answer = 0
alpha = alpha_beta[1]
beta = alpha_beta[2]
for (i in 1:length(data)){
answer = answer + - dbeta(data[i],alpha,beta,log=TRUE)
}
answer
}
out <- optim(par = c(1,1),fn = loglik1_par,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B")
out
loglik1_par(allp$p1,out$par)
loglik1_par(allp$p1,c(5,1))
help(optim)
out <- optim(par = c(1,1),fn = loglik1_par,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B",control$fnscale = -1)
out <- optim(par = c(1,1),fn = loglik1_par,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B",control$fnscale = -1 )
out <- optim(par = c(1,1),fn = loglik1_par,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B",control$fnscale)
loglik1_par <- function(data, alpha_beta){
answer = 0
alpha = alpha_beta[1]
beta = alpha_beta[2]
for (i in 1:length(data)){
answer = answer + dbeta(data[i],alpha,beta,log=TRUE)
}
answer
}
out <- optim(par = c(1,1),fn = loglik1_par,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B")
help(mle)
library(stats4)
help(mle)
loglik1_par <- function(data, alpha_beta){
answer = 0
alpha = alpha_beta[1]
beta = alpha_beta[2]
for (i in 1:length(data)){
answer = answer + - dbeta(data[i],alpha,beta,log=TRUE)
}
answer
}
out <- optim(par = c(1,1),fn = loglik1_par,data=allp$p1[1:10],lower=c(0,0), method="L-BFGS-B")
mle(loglik1_par,c(1,1),method="L-BFGS-B")
help(mle.beta)
help(beta.mle)
install.packages("https://www.rdocumentation.org/packages/Rfast")
help(beta.mle)
help(optimze)
help(optimize)
out <- optim(par = c(1,1),fn = loglik1_par,data=allp$p1,lower=c(0,0), method="L-BFGS-B")
loglik1_par((allp$p1,out$par))
loglik1_par((allp$p1,out$par))
loglik1_par(allp$p1,out$par))
loglik1_par(allp$p1,out$par))
loglik1_par(allp$p1,out$par)
out <- optimize(f = loglik, interval = c(0,10),data=allp$p1,maxmimum=TRUE)
out <- optimize(f = loglik, interval = c(0,10),data=allp$p1,maximum=TRUE)
out <- optim(par = c(1,1),fn = loglik1_par,data=allp$p1,lower=c(0,0), method="L-BFGS-B")
out
surf3D(M$x,M$y,loglik(allp$p1,M$x,M$y), colkey=FALSE,bty="b2",xlab="alpha",ylab="beta",zlab="likelihood")
library(plot3D)
surf3D(M$x,M$y,loglik(allp$p1,M$x,M$y), colkey=FALSE,bty="b2",xlab="alpha",ylab="beta",zlab="likelihood")
x <- seq(0,1,0.01)
x
hist(dbeta(x,1,5))
hist(dbeta(x,1,2))
hist(dbeta(x,1,1))
plot(x,dbeta(x,1,4))
out <- optimize(f = loglik, interval = c(0,10),data=allp$p1,maximum=TRUE)
out <- optim(par = c(1,1),fn = loglik1_par,data=allp$p1,lower=c(0,0), method="L-BFGS-B")
out
help(optim)
out <- optim(par = c(1,1),fn = loglik1_par,data=allp$p1,lower=c(0,0), method="L-BFGS-B", fnscale = -1)
out <- optim(par = c(1,1),fn = loglik1_par,data=allp$p1,lower=c(0,0), method="L-BFGS-B", control$fnscale = -1)
out <- optim(par = c(1,1),fn = loglik1_par,data=allp$p1,lower=c(0,0), method="L-BFGS-B", control = list(fnscale=-1))
out <- optim(par = c(1,4),fn = loglik1_par,data=allp$p1,lower=c(0,0), method="L-BFGS-B", control = list(fnscale=-1))
out <- optim(par = c(1,4),fn = loglik1_par,data=allp$p1,lower=c(0.1,0.1), method="L-BFGS-B", control = list(fnscale=-1))
out
averaged_resp_weights <- function(data, pi_vector, alpha, beta) {
pi_new_vector = 0
for (j in 1:length(pi_vector)){
sum = 0
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
# average is new value for pi_j^+
average = sum / length(data)
pi_new_vector[j] = average
if (j != 1){
par <- optim(c(alpha[j],beta[j]),loglik,x=data,lower=c(0,0), method="L-BFGS-B",control = list(fnscale=-1))$par
alpha[j] = par[[1]]
beta[j] = par[[2]]
}
}
list(pi_new_vector, alpha, beta)
}
data = allp$p1
alpha = c(1,1)
beta = c(1,3)
number_of_iterations = 10
# initial value
pi_vector = c(0.3,0.7)
# run EM algo
lijst <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
pi_vector <- lijst[[1]]
alpha <- lijst[[2]]
beta <- lijst[[3]]
em_algo <- function(data,pi_vector,alpha,beta, number_of_iterations){
for (n in 1:number_of_iterations){
lijst = averaged_resp_weights(data, pi_vector, alpha, beta)
pi_vector = lijst[[1]]
alpha = lijst[[2]]
beta = lijst[[3]]
}
list(pi_vector, alpha, beta)
}
data = allp$p1
alpha = c(1,1)
beta = c(1,3)
number_of_iterations = 10
# initial value
pi_vector = c(0.3,0.7)
# run EM algo
lijst <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
pi_vector <- lijst[[1]]
alpha <- lijst[[2]]
beta <- lijst[[3]]
# run EM algo
lijst <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
averaged_resp_weights <- function(data, pi_vector, alpha, beta) {
pi_new_vector = 0
for (j in 1:length(pi_vector)){
sum = 0
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
# average is new value for pi_j^+
average = sum / length(data)
pi_new_vector[j] = average
if (j != 1){
par <- optim(c(alpha[j],beta[j]),loglik,x=data,lower=c(0.1,0.1), method="L-BFGS-B",control = list(fnscale=-1))$par
alpha[j] = par[[1]]
beta[j] = par[[2]]
}
}
list(pi_new_vector, alpha, beta)
}
# run EM algo
lijst <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
averaged_resp_weights <- function(data, pi_vector, alpha, beta) {
pi_new_vector = 0
for (j in 1:length(pi_vector)){
sum = 0
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
# average is new value for pi_j^+
average = sum / length(data)
pi_new_vector[j] = average
if (j != 1){
par <- optim(c(alpha[j],beta[j]),loglik1_par,x=data,lower=c(0.1,0.1), method="L-BFGS-B",control = list(fnscale=-1))$par
alpha[j] = par[[1]]
beta[j] = par[[2]]
}
}
list(pi_new_vector, alpha, beta)
}
# run EM algo
lijst <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
alpha
beta
j = 2
par <- optim(c(alpha[j],beta[j]),loglik1_par,x=data,lower=c(0.1,0.1), method="L-BFGS-B",control = list(fnscale=-1))$par
averaged_resp_weights <- function(data, pi_vector, alpha, beta) {
pi_new_vector = 0
for (j in 1:length(pi_vector)){
sum = 0
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
# average is new value for pi_j^+
average = sum / length(data)
pi_new_vector[j] = average
if (j != 1){
par <- optim(c(alpha[j],beta[j]),loglik1_par,data=data,lower=c(0.1,0.1), method="L-BFGS-B",control = list(fnscale=-1))$par
alpha[j] = par[[1]]
beta[j] = par[[2]]
}
}
list(pi_new_vector, alpha, beta)
}
# run EM algo
lijst <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
lijst
lijst$par
lijst[[1]]
alpha[[2]]
beta[[2]]
lijst[[2]]
lijst[[3]]
alpha = c(1,3)
beta = c(1,1)
# initial value
pi_vector = c(0.3,0.7)
# run EM algo
lijst <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
lijst
alpha = c(3,1)
beta = c(1,1)
# run EM algo
lijst <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
lijst
log(3)
log(2.7)
log(3)/log(10)
hep(optim)
help(optim)
x <- rbeta(1000, 1, 4)
system.time( for(i in 1:1000) beta.mle(x) )
beta.mle(x)
pi_vector = c(0.4,0.6)
alphas = 1
betas = 4
expectation_f <- function(data, pi_vector, alpha_beta){
alpha = alpha_beta[1]
beta = alpha_beta[2]
for (j in 1:length(pi_vector)) {
sum = 0
for (i in 1:length(data)) {
sum = sum + (log(data[i]) * expected_resp(data[i], pi_vector, j, alpha, beta))
}
}
# return
sum
}
expectation_f(c(1,2,1),c(0.3,0.7),c(1,4))
c(1,4)[1]
expectation_f <- function(data, pi_vector, j, alpha_beta){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
sum = sum + (log(data[i]) * expected_resp(data[i], pi_vector, j, alpha, beta))
}
# return
sum
}
expectation_f(c(1,2,1),c(0.3,0.7),1,c(1,4))
expected_resp(data[i], pi_vector, j, alpha, beta)
expected_resp(2, pi_vector, j, alpha, beta)
expected_resp(0.4, pi_vector, j, alpha, beta)
expectation_f(c(0.1,0.2,0.31),c(0.3,0.7),1,c(1,4))
expected_resp(0.31, pi_vector, j, alpha, beta)
expectation_f(data,c(0.3,0.7),1,c(1,4))
# variables
data = allp$p1
pi_vector = c(0.4,0.6)
alpha_beta = c(1,4)
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
i = 1
j = 1
sum = sum + (log(data[i]) * expected_resp(data[i], pi_vector, j, alpha, beta))
sum
log(data[i)
log(data[i))
log(data[i])
dbeta(x,1,4)
dbeta(x[1],1,4)
log(Dbeta(x[1],1,4))
log(dbeta(x[1],1,4))
expectation_f <- function(data, pi_vector, j, alpha_beta){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
sum = sum + (log(dbeta(data[i],alpha,beta)) * expected_resp(data[i], pi_vector, j, alpha, beta))
}
# return
sum
}
# variables
data = allp$p1
pi_vector = c(0.4,0.6)
alpha_beta = c(1,4)
j = 1
sum = 0
sum = sum + (log(dbeta(data[i],alpha,beta)) * expected_resp(data[i], pi_vector, j, alpha, beta))
sum
i
(log(dbeta(data[i],alpha,beta))
)
(log(dbeta(data[i],alpha,beta)))
dbeta(data[i],alpha,beta)
data[i]
expected_resp(data[i], pi_vector, j, alpha, beta))
expected_resp(data[i], pi_vector, j, alpha, beta)
expectation_f <- function(data, pi_vector, j, alphas, betas, alpha_beta){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
sum = sum + (log(dbeta(data[i],alpha,beta)) * expected_resp(data[i], pi_vector, j, alphas, betas))
}
# return
sum
}
expected_resp(data[i], pi_vector, j, alpha, beta))
expectation_f(data,c(0.3,0.7),1,c(1,4))
exoectation_f(allp$p1,pi_vector,2,c(1,1),c(1,4),c(1,4))
expectation_f(allp$p1,pi_vector,2,c(1,1),c(1,4),c(1,4))
optim(alpha_beta,expectation_f,data=allp$p1,j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B"))
optim(alpha_beta,expectation_f,data=allp$p1,j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B")
alpha_beta
optim(par=alpha_beta,expectation_f,data=allp$p1,j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B")
optim(par=alpha_beta,expectation_f,data=allp$p1,j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B")
out <- optim(par = c(1,4),fn = loglik1_par,data=allp$p1,lower=c(0.1,0.1), method="L-BFGS-B", control = list(fnscale=-1))
out
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
sum = sum + (log(dbeta(data[i],alpha,beta)) * expected_resp(data[i], pi_vector, j, alphas, betas))
}
# return
sum
}
optim(par=c(1,4),expectation_f,data=allp$p1,j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B")
optim(par=c(1,4),expectation_f,data=allp$p1,pi_vector=c(0.3,0.7),j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B")
expectation_f(alpha_beta,data, pi_vector, j, alphas, betas)
j
sum = 0
sum = sum + (log(dbeta(data[i],alpha,beta)) * expected_resp(data[i], pi_vector, j, alphas, betas))
sum
expected_resp(data[i], pi_vector, j, alphas, betas))
expected_resp(data[i], pi_vector, j, alphas, betas)
data[i]
k
k=1
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
sum
x
x=data[i]
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
sum = 0
w_i_j = 0
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
sum
k=2
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
k=2
sum
alpha[2]
alpha=c(1,1)
beta=c(1,4)
expected_resp(data[i],pi_vector,1,alpha,beta)
alpha
beta
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
}
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
# return
w_i_j
}
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
sum = sum + (log(dbeta(data[i],alpha,beta)) * expected_resp(data[i], pi_vector, j, alphas, betas))
}
# return
sum
}
alpha_beta
alphas
alphas = c(1,1)
betas = c(1,4)
expectation_f((alpha_beta,data, pi_vector, j, alphas, betas))
expectation_f(alpha_beta,data, pi_vector, j, alphas, betas)
optim(par=c(1,4),expectation_f,data=allp$p1,pi_vector=c(0.3,0.7),j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B")
expectation_f(alpha_beta,allp$p1,pi_vector,alphas,betas)
expectation_f(alpha_beta,allp$p1,pi_vector,1,alphas,betas)
expectation_f(alpha_beta,allp$p1,pi_vector,2,alphas,betas)
optim(par=c(1,4),expectation_f,data=allp$p1,pi_vector=c(0.3,0.7),j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B")
expectation_f(alpha_beta,allp$p1,pi_vector,alphas,betas)
expectation_f(alpha_beta,allp$p1,pi_vector,alphas,betas)
alphas
pi_vector
sum = 0
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
sum
j=2
sum = 0
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
sum
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
print(sum)
}
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
# return
w_i_j
}
optim(par=c(1,4),expectation_f,data=allp$p1,pi_vector=c(0.3,0.7),j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B")
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#print(sum)
}
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
print(w_i_j)
# return
w_i_j
}
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#print(sum)
}
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
print(w_i_j)
# return
w_i_j
}
optim(par=c(1,4),expectation_f,data=allp$p1,pi_vector=c(0.3,0.7),j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B")
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#print(sum)
}
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
#print(w_i_j)
# return
w_i_j
}
optim(par=c(1,4),expectation_f,data=allp$p1,pi_vector=c(0.3,0.7),j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B")
