pi_new_vector[2] <- 3
pi_new_vector
clear pi_new_vector
test
test3
test3[1] <- 1
test3 = 0
test3[1] <- 1
test3
averaged_resp_weights <- function(data, pi_vector, alpha, beta) {
sum = 0
pi__new_vector = 0
for (j in length(pi_vector)){
for (i in 1:length(data)){
sum = sum + expected_resp(x, pi_vector, j, alpha, beta)
}
# average is new value for pi_j^+
average = sum / length(data)
pi_new_vector[j] = average
}
pi_new_vector
}
averaged_resp_weights(allp$p1,c(0.5,0.5,1,3))
averaged_resp_weights <- function(data, pi_vector, alpha, beta) {
sum = 0
pi__new_vector = 0
for (j in length(pi_vector)){
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
# average is new value for pi_j^+
average = sum / length(data)
pi_new_vector[j] = average
}
pi_new_vector
}
allp$p1[1]
averaged_resp_weights <- function(data, pi_vector, alpha, beta) {
sum = 0
pi__new_vector = 0
for (j in length(pi_vector)){
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
# average is new value for pi_j^+
average = sum / length(data)
pi_new_vector[j] = average
}
pi_new_vector
}
averaged_resp_weights(allp$p1,c(0.5,0.5,1,3))
averaged_resp_weights(allp$p1,c(0.5,0.5),1,3))
averaged_resp_weights(allp$p1,c(0.5,0.5),1,3)
expected_resp(allp$p1[i], c(0.5,0.5), 1, 1, 3)
expected_resp(data[i], pi_vector, j, alpha, beta)
allp$p1[1]
expected_resp(allp$p1[1], c(0.5,0.5), 1, 1, 3)
averaged_resp_weights(allp$p1,c(0.3,0.7),1,3)
x = allp$p1[1]
dunif(x)
0.7 * dbeta(x,1,3)
sum = 0.7 * dbeta(x,1,3) + 1
sum
0.3 * 1 / sum
expected_resp(allp$p1[1], c(0.5,0.5), 1, 1, 3)
sum = 0
w_i_j = 0
pi_vector = c(0.3,0.7)
sum = sum + pi_vector[1] * dunif(x)
sum
k = 2
sum = sum + pi_vector[k] * dunif(x)
sum
sum = sum + pi_vector[1] * dunif(x)
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
sum = sum + pi_vector[k] * dbeta(x,1,3)
sum
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
for (k in length(pi_vector)){
# take unif distr if j == 1, else beta distr
if (j == 1){
sum = sum + pi_vector[k] * dunif(x)
}
else {
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
}
}
# take unif distr if j == 1, else beta distr
if (j == 1) {
w_i_j = (pi_vector[j] * dunif(x)) / sum
}
else {
w_i_j = (pi_vector[j] * dbeta(x, alpha, beta)) / sum
}
sum
}
expected_resp(x,pi_vector,1,1,3)
pi_vector
length(pi_vector)
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
if (k == 1){
sum = sum + pi_vector[k] * dunif(x)
}
else {
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
}
}
# take unif distr if j == 1, else beta distr
if (j == 1) {
w_i_j = (pi_vector[j] * dunif(x)) / sum
}
else {
w_i_j = (pi_vector[j] * dbeta(x, alpha, beta)) / sum
}
sum
}
averaged_resp_weights(allp$p1,pi_vector,1,3)
pi_vector
pi_vector = c(0.5,0.5)
averaged_resp_weights(allp$p1,pi_vector,1,3)
pi_vector = averaged_resp_weights(allp$p1,pi_vector,1,3)
pi_vector
pi_vector = averaged_resp_weights(allp$p1,pi_vector,1,3)
pi_vector
pi_vector = averaged_resp_weights(allp$p1,pi_vector,1,3)
pi_vector
pi_vector = averaged_resp_weights(allp$p1,pi_vector,1,3)
pi_vector
pi_vector = averaged_resp_weights(allp$p1,pi_vector,1,3)
pi_vector
pi_vector = averaged_resp_weights(allp$p1,pi_vector,1,3)
pi_vector = averaged_resp_weights(allp$p1,pi_vector,1,3)
pi_vector = averaged_resp_weights(allp$p1,pi_vector,1,3)
pi_vector = averaged_resp_weights(allp$p1,pi_vector,1,3)
pi_vector = averaged_resp_weights(allp$p1,pi_vector,1,3)
pi_vector
4 + 2 * 3
pi_vector = c(0.3,0.7)
expected_resp(x,pi_vector,1,1,3)
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
if (k == 1){
sum = sum + pi_vector[k] * dunif(x)
}
else {
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
}
}
# take unif distr if j == 1, else beta distr
if (j == 1) {
w_i_j = (pi_vector[j] * dunif(x)) / sum
}
else {
w_i_j = (pi_vector[j] * dbeta(x, alpha, beta)) / sum
}
w_i_j
}
expected_resp(x,pi_vector,1,1,3)
x
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
if (k == 1){
sum = sum + pi_vector[k] * dunif(x)
}
else {
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
}
}
# take unif distr if j == 1, else beta distr
if (j == 1) {
w_i_j = (pi_vector[j] * dunif(x)) / sum
}
else {
w_i_j = (pi_vector[j] * dbeta(x, alpha, beta)) / sum
}
#w_i_j
sum
}
expected_resp(x,pi_vector,1,1,3)
sum = 0
k = 1
sum = sum + pi_vector[k] * dunif(x)
sum
k = 2
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
sum = sum + pi_vector[k] * dbeta(x,1,3)
sum
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
if (k == 1){
sum = sum + pi_vector[k] * dunif(x)
}
else {
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
}
}
# take unif distr if j == 1, else beta distr
if (j == 1) {
w_i_j = (pi_vector[j] * dunif(x)) / sum
}
else {
w_i_j = (pi_vector[j] * dbeta(x, alpha, beta)) / sum
}
#w_i_j
sum
}
expected_resp(x,pi_vector,1,1,3)
pi_vector
length(pi_vector)
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
if (k == 1){
sum = sum + pi_vector[k] * dunif(x)
}
else {
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
}
}
alpha = 1
beta = 3
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
if (k == 1){
sum = sum + pi_vector[k] * dunif(x)
}
else {
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
}
}
sum
sum = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
if (k == 1){
sum = sum + pi_vector[k] * dunif(x)
}
else {
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
}
}
sum
clear(k)
clean(k)
k
sumn
sum
sum = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
if (k == 1){
sum = sum + pi_vector[k] * dunif(x)
}
else {
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
}
}
sum
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
if (k == 1){
sum = sum + pi_vector[k] * dunif(x)
}
else {
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
}
}
# take unif distr if j == 1, else beta distr
if (j == 1) {
w_i_j = (pi_vector[j] * dunif(x)) / sum
}
else {
w_i_j = (pi_vector[j] * dbeta(x, alpha, beta)) / sum
}
#w_i_j
sum
}
expected_resp(x,pi_vector,1,alpha,beta)
k = 1
k==1
sum = 0
sum = sum + pi_vector[k] * dunif(x)
sum
k = 2
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
sum
sum = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
if (k == 1){
sum = sum + pi_vector[k] * dunif(x)
}
else {
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
}
}
sum
k
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
if (k == 1){
sum = sum + pi_vector[k] * dunif(x)
}
else {
sum = sum + pi_vector[k] * dbeta(x,alpha,beta)
}
}
expec
expected_resp(x,pi_vector,1,alpha,beta)
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum = sum + pi_vector[k] * dbeta(x,alpha[k],beta[k])
#}
}
# take unif distr if j == 1, else beta distr
# if (j == 1) {
#   w_i_j = (pi_vector[j] * dunif(x)) / sum
# }
# else {
w_i_j = (pi_vector[j] * dbeta(x, alpha[k], beta[k])) / sum
#}
#w_i_j
sum
}
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum = sum + pi_vector[k] * dbeta(x,alpha[k],beta[k])
#}
}
# take unif distr if j == 1, else beta distr
# if (j == 1) {
#   w_i_j = (pi_vector[j] * dunif(x)) / sum
# }
# else {
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
#}
#w_i_j
sum
}
expected_resp(x,pi_vector,1,c(1,1),c(1,3))
expected_resp(x,pi_vector,1,c(1,1),c(1,3))
test = 1
test
}
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum = sum + pi_vector[k] * dbeta(x,alpha[k],beta[k])
#}
}
# take unif distr if j == 1, else beta distr
# if (j == 1) {
#   w_i_j = (pi_vector[j] * dunif(x)) / sum
# }
# else {
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
#}
#w_i_j
sum
}
expected_resp(x,pi_vector,1,c(1,1),c(1,3))
sum = 0
sum = sum + pi_vector[k] * dbeta(x,alpha[k],beta[k])
sum
k
k = 1
sum = 0
alpha = c(1,3)
beta = c(1,3)
alpha = c(1,1)
sum = sum + pi_vector[k] * dbeta(x,alpha[k],beta[k])
sum
sum(2,3)
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + pi_vector[k] * dbeta(x,alpha[k],beta[k])
#}
}
# take unif distr if j == 1, else beta distr
# if (j == 1) {
#   w_i_j = (pi_vector[j] * dunif(x)) / sum
# }
# else {
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
#}
#w_i_j
sum
}
sum
sum = 0
for (k in length(pi_vector)){
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + pi_vector[k] * dbeta(x,alpha[k],beta[k])
#}
}
sum
sum = 0
for (k in length(pi_vector)) {
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + (pi_vector[k] * dbeta(x,alpha[k],beta[k]))
#}
}
sum
for (k in length(pi_vector)) {
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + (pi_vector[k] * dbeta(x,alpha[k],beta[k]))
sum
#}
}
sum
for (i in 1:3){
sum <- sum + 1
}
sum
for (k in length(pi_vector)) {
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#}
}
sum
sum
sum = 0
length(pi_vector)
length(pi_vector)[1]
length(pi_vector)[[1]]
sum = 0
length_vect = length(pi_vector)
for (k in length_vect) {
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#}
}
sum
k
k = 1
for (k in length_vect) {
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#}
}
sum
