sum = 0
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
sum
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
print(sum)
}
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
# return
w_i_j
}
optim(par=c(1,4),expectation_f,data=allp$p1,pi_vector=c(0.3,0.7),j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B")
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#print(sum)
}
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
print(w_i_j)
# return
w_i_j
}
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#print(sum)
}
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
print(w_i_j)
# return
w_i_j
}
optim(par=c(1,4),expectation_f,data=allp$p1,pi_vector=c(0.3,0.7),j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B")
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#print(sum)
}
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
#print(w_i_j)
# return
w_i_j
}
optim(par=c(1,4),expectation_f,data=allp$p1,pi_vector=c(0.3,0.7),j=2,alphas=c(1,1),betas=c(1,4),lower=c(0.1,0.1),method="L-BFGS-B")
View(M)
View(M)
objects()
objects()
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
sum = sum + (log(dbeta(data[i],alpha,beta)) * expected_resp(data[i], pi_vector, j, alphas, betas))
}
# return
sum
}
load('allp.Rdata')
load('allp.Rdata')
allp$p1[1]
ls()
load('allp.Rdata')
allp
ls()
df
load('allp.Rdata')
clear("df")
rm(df)
ls()
allp$p1
allp$p1[1]
expectation_f(c(1,4),allp$p1,c(0.2,0.8),1,c(1,1),c(1,4))
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#print(sum)
}
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
#print(w_i_j)
# return
w_i_j
}
expectation_f(c(1,4),allp$p1,c(0.2,0.8),1,c(1,1),c(1,4))
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1)
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1, alphas=c(1,1),betas=c(1,4))
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1, alphas=c(1,1),betas=c(1,4),pi_vector=c(0.2,0.8))
expectation_f(c(1,4),allp$p1,c(0.2,0.8),1,c(1,1),c(1,4))
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
sum = sum + (log(dbeta(data[i],alpha,beta)))# * expected_resp(data[i], pi_vector, j, alphas, betas))
}
# return
sum
}
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1, alphas=c(1,1),betas=c(1,4),pi_vector=c(0.2,0.8))
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=c(0.1,0.4), alphas=c(1,1),betas=c(1,4),pi_vector=c(0.2,0.8))
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
sum = sum + (dbeta(data[i],alpha,beta))# * expected_resp(data[i], pi_vector, j, alphas, betas))
}
# return
sum
}
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=c(0.1,0.4), alphas=c(1,1),betas=c(1,4),pi_vector=c(0.2,0.8))
out
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
sum = sum + (log(dbeta(data[i],alpha,beta)))# * expected_resp(data[i], pi_vector, j, alphas, betas))
}
# return
sum
}
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=c(0.1,0.4), alphas=c(1,1),betas=c(1,4),pi_vector=c(0.2,0.8),control=list(fnscale = -1))
out
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1, alphas=c(1,1),betas=c(1,4),pi_vector=c(0.2,0.8),control=list(fnscale = -1))
out
expected_resp(data[1],c(0.2,0.8),1,c(1,1),c(1,4))
expected_resp(allp$p1[1],c(0.2,0.8),1,c(1,1),c(1,4))
expected_resp(allp$p1[1],c(0.2,0.8),2,c(1,1),c(1,4))
expectation_f(c(1,4),allp$p1,c(0.2,0.8),1,c(1,1),c(1,4))
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
sum = sum + (log(dbeta(data[i],alpha,beta)) * (expected_resp(data[i], pi_vector, j, alphas, betas)))
}
# return
sum
}
expectation_f(c(1,4),allp$p1,c(0.2,0.8),1,c(1,1),c(1,4))
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1, alphas=c(1,1),betas=c(1,4),pi_vector=c(0.2,0.8),control=list(fnscale = -1))
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
sum = sum + (log(dbeta(data[i],alpha,beta))) #* (expected_resp(data[i], pi_vector, j, alphas, betas)))
}
# return
sum
}
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1, alphas=c(1,1),betas=c(1,4),pi_vector=c(0.2,0.8),control=list(fnscale = -1))
out
expected_resp(allp$p1[1],c(0.2,0.8),2,c(1,1),c(1,4))
expected_resp(allp$p1[1],c(0.2,0.8),1,c(1,1),c(1,4))
expected_resp(allp$p1[111],c(0.2,0.8),1,c(1,1),c(1,4))
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
exp_resp <- (expected_resp(data[i], pi_vector, j, alphas, betas))
print(exp_resp)
sum = sum + (log(dbeta(data[i],alpha,beta)) * expected_resp)
print(sum)
}
# return
sum
}
# best
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1[1:100], alphas=c(1,1),betas=c(1,4),pi_vector=c(0.2,0.8),control=list(fnscale = -1))
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
exp_resp <- (expected_resp(data[i], pi_vector, j, alphas, betas))
print(exp_resp)
sum = sum + (log(dbeta(data[i],alpha,beta)) * exp_resp)
print(sum)
}
# return
sum
}
# best
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1[1:100], alphas=c(1,1),betas=c(1,4),pi_vector=c(0.2,0.8),control=list(fnscale = -1))
print("dit is i: " + i)
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
exp_resp <- (expected_resp(data[i], pi_vector, j, alphas, betas))
print("dit is i: " + i)
print(exp_resp)
sum = sum + (log(dbeta(data[i],alpha,beta)) * exp_resp)
print(sum)
}
# return
sum
}
# best
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1[1:100], alphas=c(1,1),betas=c(1,4),pi_vector=c(0.2,0.8),control=list(fnscale = -1))
help(print)
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
for (i in 1:length(data)) {
exp_resp <- (expected_resp(data[i], pi_vector, j, alphas, betas))
print("dit is i: ")
print(i)
print(exp_resp)
sum = sum + (log(dbeta(data[i],alpha,beta)) * exp_resp)
print(sum)
}
# return
sum
}
# best
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1[1:100], alphas=c(1,1),betas=c(1,4),pi_vector=c(0.2,0.8),control=list(fnscale = -1))
(expected_resp(allp$p1[1], c(0.3,0.7), 1, c(1,1), c(1,4)))
expectation_f(c(1,4),allp$p1[1:100],c(0.3,0.7),1,c(1,1),c(1,4))
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
exp_resp <- 0
for (i in 1:length(data)) {
exp_resp <- (expected_resp(data[i], pi_vector, j, alphas, betas))
print("dit is i: ")
print(i)
print(exp_resp)
sum = sum + (log(dbeta(data[i],alpha,beta)) * exp_resp)
print(sum)
}
# return
sum
}
# best
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1[1:5], alphas=c(1,1),betas=c(1,4),pi_vector=c(0.2,0.8),control=list(fnscale = -1))
# best
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1[1:5],pi_vector=c(0.2,0.8),j=1, alphas=c(1,1),betas=c(1,4),control=list(fnscale = -1))
out
# best
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1,pi_vector=c(0.2,0.8),j=1, alphas=c(1,1),betas=c(1,4),control=list(fnscale = -1))
expectation_f <- function(alpha_beta,data, pi_vector, j, alphas, betas){
alpha = alpha_beta[1]
beta = alpha_beta[2]
sum = 0
exp_resp <- 0
for (i in 1:length(data)) {
exp_resp <- (expected_resp(data[i], pi_vector, j, alphas, betas))
sum = sum + (log(dbeta(data[i],alpha,beta)) * exp_resp)
}
# return
sum
}
# best
out <- optim(c(1,4),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1,pi_vector=c(0.2,0.8),j=1, alphas=c(1,1),betas=c(1,4),control=list(fnscale = -1))
out
averaged_resp_weights <- function(data, pi_vector, alpha, beta) {
pi_new_vector = 0
for (j in 1:length(pi_vector)){
sum = 0
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
# average is new value for pi_j^+
average = sum / length(data)
pi_new_vector[j] = average
if (j != 1){
#par <- optim(c(alpha[j],beta[j]),loglik1_par,data=data,lower=c(0.1,0.1), method="L-BFGS-B",control = list(fnscale=-1))$par
out <- optim(c(alpha[j],beta[j]),expectation_f,lower=c(0.1,0.1),method="L-BFGS-B",data=allp$p1,pi_vector=pi_vector,j=j, alphas=alpha,betas=beta,control=list(fnscale = -1))
par <- out$par
alpha[j] = par[[1]]
beta[j] = par[[2]]
}
}
list(pi_new_vector, alpha, beta)
}
pi_vector
pi_vector <- c(0.2,0.8)
alpha = c(1,1)
beta = c(1,4)
data = allp$p1
lijst = averaged_resp_weights(data, pi_vector, alpha, beta)
lijst
lijst = averaged_resp_weights(data, pi_vector, alpha, beta)
lijst
em_algo <- function(data,pi_vector,alpha,beta, number_of_iterations){
for (n in 1:number_of_iterations){
lijst = averaged_resp_weights(data, pi_vector, alpha, beta)
pi_vector = lijst[[1]]
alpha = lijst[[2]]
beta = lijst[[3]]
}
list(pi_vector, alpha, beta)
}
### EXAMPLE 1 ###
# variables
data = allp$p1
alpha = c(1,1)
beta = c(1,4)
number_of_iterations = 10
# initial value
pi_vector = c(0.3,0.7)
# run EM algo
lijst <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
pi_vector <- lijst[[1]]
alpha <- lijst[[2]]
beta <- lijst[[3]]
pi_vector
alpha
beta
# plot result
plot_distribution(data, pi_vector, alpha, beta)
plot_distribution <- function(data, pi_vector, alpha, beta){
hist(data,freq=FALSE)
x <- seq(0,1,0.01)
y <- vector(mode="numeric", length=length(x))
sum = 0
for (i in 1:length(x)){
for (k in 1:length(pi_vector)){
y[i] <- y[i] +  pi_vector[k] * dbeta(x[i],alpha[k],beta[k])
}
}
lines(x,y)
}
# plot result
plot_distribution(data, pi_vector, alpha, beta)
pi_vector
data = allp$p1
alpha = c(1,3)
beta = c(1,1)
number_of_iterations = 10
# initial value
pi_vector = c(0.3,0.7)
# run EM algo
lijst <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
pi_vector <- lijst[[1]]
alpha <- lijst[[2]]
beta <- lijst[[3]]
# plot result
plot_distribution(data, pi_vector, alpha, beta)
pi_vector
alpha
beta
data = allp$p4[1:1000]
alpha = c(1,3)
beta = c(1,1)
number_of_iterations = 10
# initial value
pi_vector = c(0.3,0.7)
# run EM algo
lijst <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
pi_vector <- lijst[[1]]
alpha <- lijst[[2]]
beta <- lijst[[3]]
# plot result
plot_distribution(data, pi_vector, alpha, beta)
pi_vector
alpha
beta
data = allp$p4[1:10]
alpha = c(1,3)
beta = c(1,1)
number_of_iterations = 10
# initial value
pi_vector = c(0.3,0.7)
# run EM algo
lijst <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
data]
data
data = allp$p4[1:10]
alpha = c(1,3)
beta = c(1,1)
number_of_iterations = 1
# initial value
pi_vector = c(0.3,0.7)
# run EM algo
lijst <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
plot(sort(pvector1))
pvector1 = allp[[1]]
plot(sort(pvector1))
help(docstring)
library(docstring)
install.packages(https://github.com/dasonk/docstring)
install.packages("https://github.com/dasonk/docstring")
library(docstring)
help(docstring)
3^2
kwadraat <- fucntion(x) {
ans = x^2
return(ans)
}
kwadraat <- fucntion(x) {
ans = x^2
return(ans)
}
kwadraat <- function(x) {
ans = x^2
return(ans)
}
kwadraat(4)
kwadraat <- function(x) {
#' Square a number
#'
#' calculates the square of an input
#'
#' @param x the input to be squaredd
ans = x^2
return(ans)
}
docstring(square)
library(docstring)
?kwadraat
kwadraat
install.packages("docstrings")
install.packages("docstring")
help(docstring())
help(docstring)
library(docstring())
library(docstring)
Sys.setenv(PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig")
install.packages("docstring")
wget ftp://xmlsoft.org/libxml2/libxml2-2.9.2.tar.gz
install.packages("docstring")
library(docstring)
docstring(kwadraat)
install.packages("rstudioapi")
docstring(kwadraat)
mixture_density <- function(x, pi_0, pi_1, alpha, beta){
#' Denisty of a mixture distribution
#'
#' Give density of a mixture uniform with one beta(alpha,beta) distribution
#'
#' @param x vector over which density is calculated, usually on interval (0,1)
#' @param pi vector of length two with weight of uniform and beta distribution
pi_0 * dunif(x) + pi_1 * dbeta(x,alpha,beta)
}
docstring(mixture_density)
mixture_density
help(mixture_density)
seq(0,1,10)
seq(0,1,0.1)
mixture_density <- function(x, pi_0, pi_1, alpha, beta){
pi_0 * dunif(x) + pi_1 * dbeta(x,alpha,beta)
}
help(mixture_density)
help("mixture_density")
devtools::document()
install.packages("devtools")
devtools::document()
install.packages("root")
help("mixture_density")
help("mixture_density")
devtools::document()
devtools::document()
mixture_density <- function(x, pi_0, pi_1, alpha, beta){
#' Denisty of a mixture distribution
#'
#' Give density of a mixture uniform with one beta(alpha,beta) distribution
#'
#' @param x vector over which density is calculated, usually on interval (0,1)
#' @param pi vector of length two with weight of uniform and beta distribution
#'
#' mixture(density(seq(0,1,0.1),0.5,0.5,1,4))
pi_0 * dunif(x) + pi_1 * dbeta(x,alpha,beta)
}
mixture_density <- function(x, pi_0, pi_1, alpha, beta){
#' Denisty of a mixture distribution
#'
#' Give density of a mixture uniform with one beta(alpha,beta) distribution
#'
#' @param x vector over which density is calculated, usually on interval (0,1)
#' @param pi vector of length two with weight of uniform and beta distribution
#'
#' mixture(density(seq(0,1,0.1),0.5,0.5,1,4))
pi_0 * dunif(x) + pi_1 * dbeta(x,alpha,beta)
}
docstring(mixture_density)
mixture_density <- function(x, pi_0, pi_1, alpha, beta){
#' Denisty of a mixture distribution
#'
#' Give density of a mixture uniform with one beta(alpha,beta) distribution
#'
#' mixture(density(seq(0,1,0.1),0.5,0.5,1,4))
#'
#' @param x vector over which density is calculated, usually on interval (0,1)
#' @param pi vector of length two with weight of uniform and beta distribution
#'
pi_0 * dunif(x) + pi_1 * dbeta(x,alpha,beta)
}
docstring(mixture_density)
