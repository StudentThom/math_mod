}
sum
k
k = 1
for (k in length_vect) {
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#}
}
sum
load('allp.Rdata')
allp
allp$p1
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
test = 0
length_vect = length(pi_vector)
for (k in length_vect) {
test = test + k
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#}
}
}
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
test = 0
length_vect = length(pi_vector)
for (k in length_vect) {
test = test + k
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#}
}
# take unif distr if j == 1, else beta distr
# if (j == 1) {
#   w_i_j = (pi_vector[j] * dunif(x)) / sum
# }
# else {
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
#}
#w_i_j
sum
}
expected_resp(x, pi_vector, 1, alpha,beta)
test
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
test = 0
length_vect = length(pi_vector)
for (k in length_vect) {
test = test + k
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#}
}
# take unif distr if j == 1, else beta distr
# if (j == 1) {
#   w_i_j = (pi_vector[j] * dunif(x)) / sum
# }
# else {
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
#}
#w_i_j
sum
test
}
test
expected_resp(x, pi_vector, 1, alpha,beta)
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
test = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
test = test + k
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#}
}
# take unif distr if j == 1, else beta distr
# if (j == 1) {
#   w_i_j = (pi_vector[j] * dunif(x)) / sum
# }
# else {
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
#}
#w_i_j
sum
test
}
expected_resp(x, pi_vector, 1, alpha,beta)
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
test = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
test = test + k
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#}
}
# take unif distr if j == 1, else beta distr
# if (j == 1) {
#   w_i_j = (pi_vector[j] * dunif(x)) / sum
# }
# else {
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
#}
#w_i_j
sum
}
expected_resp(x, pi_vector, 1, alpha,beta)
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
test = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
test = test + k
# take unif distr if k == 1, else beta distr
#if (k == 1){
#  sum = sum + pi_vector[k] * dunif(x)
#}
#else {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
#}
}
# take unif distr if j == 1, else beta distr
# if (j == 1) {
#   w_i_j = (pi_vector[j] * dunif(x)) / sum
# }
# else {
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
#}
#w_i_j
sum
}
averaged_resp_weights <- function(data, pi_vector, alpha, beta) {
sum = 0
pi__new_vector = 0
for (j in 1:length(pi_vector)){
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
# average is new value for pi_j^+
average = sum / length(data)
pi_new_vector[j] = average
}
pi_new_vector
}
averaged_resp_weights(allp$p1,pi_vector,alpha,beta)
pi_vector
sum = 0
sum = sum + expected_resp(allp$p1[1], pi_vector, 1, alpha, beta)
sum
average = sum / length(data)
average
average = sum / length(allp$p1)
average
j=1
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
data = allp$p1
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
sum
average = sum / length(data)
average
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
test = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
}
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
w_i_j
}
averaged_resp_weights <- function(data, pi_vector, alpha, beta) {
sum = 0
pi__new_vector = 0
for (j in 1:length(pi_vector)){
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
# average is new value for pi_j^+
average = sum / length(data)
pi_new_vector[j] = average
}
pi_new_vector
}
averaged_resp_weights(data,pi_vector,alpha,beta)
averaged_resp_weights <- function(data, pi_vector, alpha, beta) {
sum = 0
pi_new_vector = 0
for (j in 1:length(pi_vector)){
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
# average is new value for pi_j^+
average = sum / length(data)
pi_new_vector[j] = average
}
pi_new_vector
}
averaged_resp_weights(data,pi_vector,alpha,beta)
pi_vector
expected_resp <- function(x, pi_vector, j, alpha, beta){
sum = 0
w_i_j = 0
length_vect = length(pi_vector)
for (k in 1:length_vect) {
sum <- sum + ((pi_vector[k] * dbeta(x,alpha[k],beta[k])))
}
w_i_j = (pi_vector[j] * dbeta(x, alpha[j], beta[j])) / sum
# return
w_i_j
}
averaged_resp_weights <- function(data, pi_vector, alpha, beta) {
sum = 0
pi_new_vector = 0
for (j in 1:length(pi_vector)){
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
# average is new value for pi_j^+
average = sum / length(data)
pi_new_vector[j] = average
}
pi_new_vector
}
averaged_resp_weights(data,pi_vector,alpha,beta)
expected_resp(x,pi_vector,2,alpha,beta)
averaged_resp_weights <- function(data, pi_vector, alpha, beta) {
#sum = 0
pi_new_vector = 0
for (j in 1:length(pi_vector)){
sum = 0
for (i in 1:length(data)){
sum = sum + expected_resp(data[i], pi_vector, j, alpha, beta)
}
# average is new value for pi_j^+
average = sum / length(data)
pi_new_vector[j] = average
}
pi_new_vector
}
expected_resp(x,pi_vector,2,alpha,beta)
averaged_resp_weights(data,pi_vector,alpha,beta)
pi_vector = c(0.5,0.5)
alpha = c(1,1)
beta = c(1,3)
for (n in 1:10){
pi_vector = averaged_resp_weights(allp$p1, pi_vector, alpha, beta)
}
pi_vector
pi_vector = c(0.3,0.7)
alpha = c(1,1)
beta = c(1,3)
for (n in 1:10){
pi_vector = averaged_resp_weights(allp$p1, pi_vector, alpha, beta)
}
pi_vector
pi_vector = c(0.3,0.7)
alpha = c(1,1)
beta = c(1,3)
for (n in 1:10){
pi_vector = averaged_resp_weights(allp$p2, pi_vector, alpha, beta)
}
pi_vector
pi_vector = c(0.3,0.7)
alpha = c(1,1)
beta = c(1,3)
for (n in 1:10){
pi_vector = averaged_resp_weights(allp$p4, pi_vector, alpha, beta)
}
pi_vector
pi_vector = c(0.3,0.4,0.3)
alpha = c(1,1,5)
beta = c(1,3,1)
for (n in 1:10){
pi_vector = averaged_resp_weights(allp$p4, pi_vector, alpha, beta)
}
pi_vector
plot_distribution <- function(data, pi_vector, alpha, beta){
hist(data)
}
plot_distribution(allp$p1,0,0,0)
x <- seq(0,1,0.01)
x
plot(x,dbeta(x,1,4))
lineplot(x,dbeta(x,1,4))
??ploi
??plot
help("plot")
plot(x,dbeta(x,1,4),type="l")
lines(x,dbeta(x,1,4))
hist(data)
lines(x,dbeta(x,1,4))
help(hist)
hist(data,freq=FALSE)
lines(x,dbeta(x,1,4))
x <- seq(0,1,0.01)
sum = 0
for (i in x){
sum = sum +1
}
sum
y <- 0
sum = 0
for (i in x){
y[i] <- x
}
y
for (i in x){
y[i] <- x[i]
}
y
y[1]
y[3]
y <- vector(mode="numeric", length=0)
y
y <- vector(mode="numeric", length=5)
y
length(x)
x <- seq(0,1,0.01)
y <- vector(mode="numeric", length=length(x))
sum = 0
for (i in x){
y[i] <- x[i]
}
y
x
y[3] <- x[3]
y
for (i in 1:length(x)){
y[i] <- x[i]
}
y
pi_vector
alpha
beta
for (i in 1:length(x)){
for (k in 1:length(pi_vector)){
y[i] <- pi_vector[k] * dbeta(x[i],alpha[k],beta[k])
}
}
y
lines(x,y)
dbeta(x[1],alpha[1],beta[1]
)
plot_distribution <- function(data, pi_vector, alpha, beta){
hist(data,freq=FALSE)
x <- seq(0,1,0.01)
y <- vector(mode="numeric", length=length(x))
sum = 0
for (i in 1:length(x)){
for (k in 1:length(pi_vector)){
y[i] <- y[i] +  pi_vector[k] * dbeta(x[i],alpha[k],beta[k])
}
}
}
plot_distribution(allp$p4,pi_vector,pi_vector,alpha,beta)
plot_distribution(allp$p4,pi_vector,alpha,beta)
plot_distribution <- function(data, pi_vector, alpha, beta){
hist(data,freq=FALSE)
x <- seq(0,1,0.01)
y <- vector(mode="numeric", length=length(x))
sum = 0
for (i in 1:length(x)){
for (k in 1:length(pi_vector)){
y[i] <- y[i] +  pi_vector[k] * dbeta(x[i],alpha[k],beta[k])
}
}
lines(x,y)
}
plot_distribution(allp$p4,pi_vector,alpha,beta)
pi_vector
em_algo <- function(data,pi_vector,alpha,beta,){
for (n in 1:number_of_iterations){
pi_vector = averaged_resp_weights(data, pi_vector, alpha, beta)
}
pi_vector
}
em_algo <- function(data,pi_vector,alpha,beta){
for (n in 1:number_of_iterations){
pi_vector = averaged_resp_weights(data, pi_vector, alpha, beta)
}
pi_vector
}
pi_vector = c(0.3,0.4,0.3)
alpha = c(1,1,5)
beta = c(1,3,1)
em_algo(allp$p1,pi_vector,alpha,beta)
em_algo <- function(data,pi_vector,alpha,beta, number_of_iterations){
for (n in 1:number_of_iterations){
pi_vector = averaged_resp_weights(data, pi_vector, alpha, beta)
}
pi_vector
}
em_algo(allp$p1,pi_vector,alpha,beta,25)
pi_vector = em_algo(allp$p1,pi_vector,alpha,beta,25)
pi_vector
plot_distribution(allp$p1,pi_vector,alpha,beta)
data = allp$p4
alpha = c(1,1,5)
beta = c(1,3,1)
number_of_iterations = 25
# initial value
pi_vector = c(0.3,0.4,0.3)
pi_vector <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
plot_distribution(data, pi_vector, alpha, beta)
# variables
data = allp$p1
alpha = c(1,1,5)
beta = c(1,3,1)
number_of_iterations = 25
# initial value
pi_vector = c(0.3,0.4,0.3)
pi_vector <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
plot_distribution(data, pi_vector, alpha, beta)
data = allp$p4
alpha = c(1,1,5,2)
beta = c(1,3,1,5)
number_of_iterations = 15
# initial value
pi_vector = c(0.25,0.25,0.25,0.25)
pi_vector <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
plot_distribution(data, pi_vector, alpha, beta)
x <- seq(0,1,0.01)
plot(x,dbeta(x,1,4))
plot(x,dbeta(x,2,4))
plot(x,dbeta(x,2,5))
plot(x,dbeta(x,2,1))
plot(x,dbeta(x,2,0.5))
plot(x,dbeta(x,2,4))
plot(x,dbeta(x,2,2))
plot(x,dbeta(x,2,1.1))
plot(x,dbeta(x,2,1.2))
plot(x,dbeta(x,4,1.2))
plot(x,dbeta(x,2,1.2))
plot(x,dbeta(x,2,1))
plot(x,dbeta(x,2,1.1))
plot(x,dbeta(x,1,1.1))
plot(x,dbeta(x,1.1,1.1))
plot(x,dbeta(x,1.1,1))
data = allp$p4
alpha = c(1,1,5,2)
beta = c(1,3,1,1.1)
number_of_iterations = 15
# initial value
pi_vector = c(0.25,0.25,0.25,0.25)
# run em algo
pi_vector <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
# plot result
plot_distribution(data, pi_vector, alpha, beta)
plot(x,dbeta(x,2,1.1))
plot(x,dbeta(x,1,1.1))
plot(x,dbeta(x,1.1,1))
# variables
data = allp$p4
alpha = c(1,1,5,1.1)
beta = c(1,3,1,1)
number_of_iterations = 15
# initial value
pi_vector = c(0.25,0.25,0.25,0.25)
# run EM algo
pi_vector <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
# plot result
plot_distribution(data, pi_vector, alpha, beta)
data = allp$p1
alpha = c(1,1,5)
beta = c(1,3,1)
number_of_iterations = 25
# initial value
pi_vector = c(0.3,0.4,0.3)
# run EM algo
pi_vector <- em_algo(data,pi_vector,alpha,beta,number_of_iterations)
# plot result
plot_distribution(data, pi_vector, alpha, beta)
